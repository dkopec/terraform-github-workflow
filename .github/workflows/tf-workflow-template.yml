# Description: This is a GitHub Actions workflow file that uses Terraform to deploy infrastructure to Azure.
# Author: https://github.com/dkopec/
# Required Secrets to be added to Envrioment Variables in GitHub Repository: 
# - AZURE_CLIENT_ID
# - AZURE_SUBSCRIPTION_ID - 
# - AZURE_TENANT_ID - Azure Tenant ID of the Azure Service Principal that will make Terraform changes
# - GH_BOT_PAT - a Github Personal Access Token with repo access to the infra repository

name: Terraform Workflow Template

on:
  workflow_call:
    inputs:
      approvers:
        description: 'The GitHub username of the person who will approve the Terraform Plan'
        type: string
        required: true
        default: ${{ github.actor }}
      app-env:
        description: 'The application environment name for the Terraform Plan, populates the state key.'
        type: string
        default: dev
      environment:
        description: 'The Github environment name. Also used to select tfvar file to use'
        type: string
        default: dev
      infra-repo:
        description: 'The GitHub repository where the Terraform code is stored'
        type: string
        default: ${{github.repository}}
      infra-ref:
        description: 'The branch or tag of the infra-repo to use'
        type: string
        default: ${{github.ref}}
      terraform-version:
        description: 'The version of Terraform to use'
        type: string
        default: 1.9.5
      terraform-environment-dir:
        description: 'The directory where the Terraform environment files are stored'
        type: string
        default: "envs"
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Service Principal Client ID with access to the Azure Subscription'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID where the Service Principal is registered'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID where the Service Principal is registered'
        required: true
      GH_BOT_PAT:
        description: 'Github Personal Access Token with repo access to the infra repository. Can be the GITHUB_TOKEN if no other repos used'
        required: true

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TERRAFORM_CODE_DIR: ${{ github.workspace }}/infra
  TF_LOG: ERROR
  TF_LOG_PATH: tf.log

concurrency:
  group: ${{ github.ref }}

jobs:
  terraform-plan:
    name: "Plan Infrastructure"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_BOT_PAT }}
          repository: ${{ inputs.infra-repo }}
          ref: ${{ github.repository != inputs.infra-repo && inputs.infra-ref || github.event_name == 'push' && github.ref || github.event_name == 'pull_request' && github.event.pull_request.head.ref }}
          path: ${{ env.TERRAFORM_CODE_DIR }}

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          terraform init -upgrade \
            -backend-config "${{inputs.terraform-environment-dir}}/${{inputs.environment}}.tfbackend" \
            -backend-config="key=${{inputs.app-env}}-${{ github.repository_id }}.tfstate"

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: terraform validate

      - name: Terraform Format
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: terraform fmt -recursive -check

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          echo "Running Terraform Plan"
          echo "Running with Enviroment: ${{inputs.app-env}}"
          terraform plan \
            -var-file "${{inputs.terraform-environment-dir}}/${{inputs.environment}}.tfvars" \
            -var "environment=${{inputs.app-env}}" \
            -no-color -input=false \
            -out tfplan
          echo "Done running Terraform Plan. tfplan created."

      - name: Archive tfplan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_CODE_DIR }}/tfplan

      - name: Upload Error Log
        if: always()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: tflog-plan
          path: ${{ env.TERRAFORM_CODE_DIR }}/${{env.TF_LOG_PATH}}

      - name: Terraform Plan Human Readable Artifact
        id: tf-text
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          terraform show -no-color tfplan > tftext

      - name: Archive tftext
        uses: actions/upload-artifact@v4
        with:
          name: tftext
          path: ${{ env.TERRAFORM_CODE_DIR }}/tftext

  wait-for-approval:
    name: "Wait for Approval"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-plan]
    timeout-minutes: 30
    steps:
      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        if: github.ref == 'refs/heads/main' || contains(github.ref, 'heads/release') || startsWith(github.ref, 'refs/tags')
        with:
          secret: ${{ secrets.GH_BOT_PAT }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: 1
          issue-title: ${{inputs.app-env}}
          issue-body: |
            Please review the Plan for the run before approving.

  terraform-apply:
    name: "Provision Infrastructure"
    runs-on:  ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [wait-for-approval]
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_BOT_PAT }}
          repository: ${{ inputs.infra-repo }}
          ref: ${{ github.repository != inputs.infra-repo && inputs.infra-ref || github.event_name == 'push' && github.ref || github.event_name == 'pull_request' && github.event.pull_request.head.ref }}
          path: ${{ env.TERRAFORM_CODE_DIR }}

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          terraform init -upgrade \
            -backend-config "${{inputs.terraform-environment-dir}}/${{inputs.environment}}.tfbackend" \
            -backend-config="key=${{inputs.app-env}}-${{ github.repository_id }}.tfstate"

      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_CODE_DIR }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          terraform apply tfplan
        continue-on-error: true

      - name: Terraform Output
        id: set-outputs
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        run: |
          echo "$(terraform output --json)" | jq -r 'keys[] as $k | "\($k)=\(.[$k].value)"' >> $GITHUB_OUTPUT

      - name: Upload Error Log
        uses: actions/upload-artifact@v4
        with:
          name: tflog-apply
          path: ${{ env.TERRAFORM_CODE_DIR }}/${{env.TF_LOG_PATH}}

      - name: Terraform Import
        id: import
        working-directory: ${{ env.TERRAFORM_CODE_DIR }}
        if: ${{ steps.apply.outcome == 'failure' || steps.apply.outputs.exitcode == '1' }}
        run: |
          echo "Attempting to Import errored resources."
          pattern='.*vertex \"(?<terraform_id>.*)\" error:.*\"(?<cloud_id>.*)\" already exists - to be managed via Terraform this resource needs to be imported into the State.*'

          grep -oP "$pattern" $TF_LOG_PATH | while read -r line ; do
              terraform_id=$(echo $line | grep -oP '(?<=vertex \").*(?=\" error)')
              azure_id=$(echo $line | grep -oP 'A resource with the ID "\K[^"]+')
              echo "Attempting to import $terraform_id $azure_id"
              terraform import -var-file "${{inputs.terraform-environment-dir}}/${{inputs.environment}}.tfvars" -var "environment=${{inputs.app-env}}" "$terraform_id" "$azure_id"
          done

      - name: Terraform Apply Outcome
        if: ${{ steps.apply.outcome == 'failure' || steps.apply.outputs.exitcode == '1' }}
        run: exit 1
    outputs:
      tf-outputs: ${{ toJSON(steps.set-outputs.outputs) }}
